// Тест для E2E-сценария с SSO
func TestE2E_CreateCampaign_WithSSO(t *testing.T) {
    // Запуск SSO-сервиса (можно использовать Docker Compose)
    ssoServer := startSSOServer()
    defer ssoServer.Stop()

    // Запуск Campaign-сервиса
    campaignServer := startCampaignServer()
    defer campaignServer.Stop()

    // Получение токена через SSO
    ssoClient, err := ssov1.NewAuthClient("localhost:50051")
    require.NoError(t, err)

    token, err := ssoClient.Login(context.Background(), "test@example.com", "password")
    require.NoError(t, err)
    require.NotEmpty(t, token)

    // Вызов метода CreateCampaign
    campaignClient, err := campaignv1.NewCampaignToolClient("localhost:8080")
    require.NoError(t, err)

    ctx := metadata.NewOutgoingContext(context.Background(), metadata.Pairs("authorization", "Bearer "+token))
    resp, err := campaignClient.CreateCampaign(ctx, &campaignv1.CreateCampaignRequest{
        Name:        "Test Campaign",
        Description: "Description",
    })

    require.NoError(t, err)
    assert.NotEmpty(t, resp.GetCampaignId())
}

func TestE2E_Authentication(t *testing.T) {
    // Запуск SSO-сервиса
    composeFilePath := "docker-compose.test.yml"
    composeCmd := exec.Command("docker-compose", "-f", composeFilePath, "up", "-d")
    require.NoError(t, composeCmd.Run())
    defer func() {
        downCmd := exec.Command("docker-compose", "-f", composeFilePath, "down")
        require.NoError(t, downCmd.Run())
    }()

    // Подключение к SSO-сервису
    ssoClient, err := ssov1.NewAuthClient("localhost:50051")
    require.NoError(t, err)

    token, err := ssoClient.Login(context.Background(), "test@example.com", "password")
    require.NoError(t, err)
    require.NotEmpty(t, token)

    // Использование токена в Campaign-сервисе
    campaignClient, err := campaignv1.NewCampaignToolClient("localhost:8080")
    require.NoError(t, err)

    ctx := metadata.NewOutgoingContext(context.Background(), metadata.Pairs("authorization", "Bearer "+token))
    resp, err := campaignClient.CreateCampaign(ctx, &campaignv1.CreateCampaignRequest{
        Name:        "Test Campaign",
        Description: "Description",
    })

    require.NoError(t, err)
    assert.NotEmpty(t, resp.GetCampaignId())
}