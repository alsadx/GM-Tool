// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/campaign/campaign.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "campaigntool/internal/domain/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGameSaver is a mock of GameSaver interface.
type MockGameSaver struct {
	ctrl     *gomock.Controller
	recorder *MockGameSaverMockRecorder
}

// MockGameSaverMockRecorder is the mock recorder for MockGameSaver.
type MockGameSaverMockRecorder struct {
	mock *MockGameSaver
}

// NewMockGameSaver creates a new mock instance.
func NewMockGameSaver(ctrl *gomock.Controller) *MockGameSaver {
	mock := &MockGameSaver{ctrl: ctrl}
	mock.recorder = &MockGameSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameSaver) EXPECT() *MockGameSaverMockRecorder {
	return m.recorder
}

// AddPlayer mocks base method.
func (m *MockGameSaver) AddPlayer(ctx context.Context, campaignId int32, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", ctx, campaignId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPlayer indicates an expected call of AddPlayer.
func (mr *MockGameSaverMockRecorder) AddPlayer(ctx, campaignId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockGameSaver)(nil).AddPlayer), ctx, campaignId, userId)
}

// DeleteCampaign mocks base method.
func (m *MockGameSaver) DeleteCampaign(ctx context.Context, campaignId int32, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaign", ctx, campaignId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCampaign indicates an expected call of DeleteCampaign.
func (mr *MockGameSaverMockRecorder) DeleteCampaign(ctx, campaignId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaign", reflect.TypeOf((*MockGameSaver)(nil).DeleteCampaign), ctx, campaignId, userId)
}

// RemovePlayer mocks base method.
func (m *MockGameSaver) RemovePlayer(ctx context.Context, campaignId int32, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePlayer", ctx, campaignId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePlayer indicates an expected call of RemovePlayer.
func (mr *MockGameSaverMockRecorder) RemovePlayer(ctx, campaignId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlayer", reflect.TypeOf((*MockGameSaver)(nil).RemovePlayer), ctx, campaignId, userId)
}

// SaveCampaign mocks base method.
func (m *MockGameSaver) SaveCampaign(ctx context.Context, name, desc string, userId int) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCampaign", ctx, name, desc, userId)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCampaign indicates an expected call of SaveCampaign.
func (mr *MockGameSaverMockRecorder) SaveCampaign(ctx, name, desc, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCampaign", reflect.TypeOf((*MockGameSaver)(nil).SaveCampaign), ctx, name, desc, userId)
}

// SetInviteCode mocks base method.
func (m *MockGameSaver) SetInviteCode(ctx context.Context, campaignId int32, inviteCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInviteCode", ctx, campaignId, inviteCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInviteCode indicates an expected call of SetInviteCode.
func (mr *MockGameSaverMockRecorder) SetInviteCode(ctx, campaignId, inviteCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInviteCode", reflect.TypeOf((*MockGameSaver)(nil).SetInviteCode), ctx, campaignId, inviteCode)
}

// MockGameProvider is a mock of GameProvider interface.
type MockGameProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGameProviderMockRecorder
}

// MockGameProviderMockRecorder is the mock recorder for MockGameProvider.
type MockGameProviderMockRecorder struct {
	mock *MockGameProvider
}

// NewMockGameProvider creates a new mock instance.
func NewMockGameProvider(ctrl *gomock.Controller) *MockGameProvider {
	mock := &MockGameProvider{ctrl: ctrl}
	mock.recorder = &MockGameProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameProvider) EXPECT() *MockGameProviderMockRecorder {
	return m.recorder
}

// CheckInviteCode mocks base method.
func (m *MockGameProvider) CheckInviteCode(ctx context.Context, inviteCode string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInviteCode", ctx, inviteCode)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInviteCode indicates an expected call of CheckInviteCode.
func (mr *MockGameProviderMockRecorder) CheckInviteCode(ctx, inviteCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInviteCode", reflect.TypeOf((*MockGameProvider)(nil).CheckInviteCode), ctx, inviteCode)
}

// CreatedCampaigns mocks base method.
func (m *MockGameProvider) CreatedCampaigns(ctx context.Context, userId int) ([]models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedCampaigns", ctx, userId)
	ret0, _ := ret[0].([]models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatedCampaigns indicates an expected call of CreatedCampaigns.
func (mr *MockGameProviderMockRecorder) CreatedCampaigns(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedCampaigns", reflect.TypeOf((*MockGameProvider)(nil).CreatedCampaigns), ctx, userId)
}

// CurrentCampaigns mocks base method.
func (m *MockGameProvider) CurrentCampaigns(ctx context.Context, userId int) ([]models.CampaignForPlayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentCampaigns", ctx, userId)
	ret0, _ := ret[0].([]models.CampaignForPlayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentCampaigns indicates an expected call of CurrentCampaigns.
func (mr *MockGameProviderMockRecorder) CurrentCampaigns(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentCampaigns", reflect.TypeOf((*MockGameProvider)(nil).CurrentCampaigns), ctx, userId)
}
