// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "sso/internal/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserSaver is a mock of UserSaver interface.
type MockUserSaver struct {
	ctrl     *gomock.Controller
	recorder *MockUserSaverMockRecorder
}

// MockUserSaverMockRecorder is the mock recorder for MockUserSaver.
type MockUserSaverMockRecorder struct {
	mock *MockUserSaver
}

// NewMockUserSaver creates a new mock instance.
func NewMockUserSaver(ctrl *gomock.Controller) *MockUserSaver {
	mock := &MockUserSaver{ctrl: ctrl}
	mock.recorder = &MockUserSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSaver) EXPECT() *MockUserSaverMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockUserSaver) DeleteSession(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockUserSaverMockRecorder) DeleteSession(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockUserSaver)(nil).DeleteSession), ctx, userId)
}

// DeleteUser mocks base method.
func (m *MockUserSaver) DeleteUser(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserSaverMockRecorder) DeleteUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserSaver)(nil).DeleteUser), ctx, userId)
}

// SaveUser mocks base method.
func (m *MockUserSaver) SaveUser(ctx context.Context, email, name string, passHash []byte) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, email, name, passHash)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserSaverMockRecorder) SaveUser(ctx, email, name, passHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserSaver)(nil).SaveUser), ctx, email, name, passHash)
}

// SetSession mocks base method.
func (m *MockUserSaver) SetSession(ctx context.Context, userId int64, session models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", ctx, userId, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSession indicates an expected call of SetSession.
func (mr *MockUserSaverMockRecorder) SetSession(ctx, userId, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockUserSaver)(nil).SetSession), ctx, userId, session)
}

// UpdateUser mocks base method.
func (m *MockUserSaver) UpdateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserSaverMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserSaver)(nil).UpdateUser), ctx, user)
}

// MockUserProvider is a mock of UserProvider interface.
type MockUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserProviderMockRecorder
}

// MockUserProviderMockRecorder is the mock recorder for MockUserProvider.
type MockUserProviderMockRecorder struct {
	mock *MockUserProvider
}

// NewMockUserProvider creates a new mock instance.
func NewMockUserProvider(ctrl *gomock.Controller) *MockUserProvider {
	mock := &MockUserProvider{ctrl: ctrl}
	mock.recorder = &MockUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProvider) EXPECT() *MockUserProviderMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockUserProvider) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockUserProviderMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockUserProvider)(nil).HealthCheck), ctx)
}

// IsAdmin mocks base method.
func (m *MockUserProvider) IsAdmin(ctx context.Context, userId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockUserProviderMockRecorder) IsAdmin(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUserProvider)(nil).IsAdmin), ctx, userId)
}

// UserByEmail mocks base method.
func (m *MockUserProvider) UserByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByEmail indicates an expected call of UserByEmail.
func (mr *MockUserProviderMockRecorder) UserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByEmail", reflect.TypeOf((*MockUserProvider)(nil).UserByEmail), ctx, email)
}

// UserById mocks base method.
func (m *MockUserProvider) UserById(ctx context.Context, userId int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserById", ctx, userId)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserById indicates an expected call of UserById.
func (mr *MockUserProviderMockRecorder) UserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserById", reflect.TypeOf((*MockUserProvider)(nil).UserById), ctx, userId)
}

// UserByRefreshToken mocks base method.
func (m *MockUserProvider) UserByRefreshToken(ctx context.Context, refreshToken string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByRefreshToken indicates an expected call of UserByRefreshToken.
func (mr *MockUserProviderMockRecorder) UserByRefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByRefreshToken", reflect.TypeOf((*MockUserProvider)(nil).UserByRefreshToken), ctx, refreshToken)
}
