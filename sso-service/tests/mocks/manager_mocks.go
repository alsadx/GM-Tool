// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/auth/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "sso/internal/domain/models"
	jwt "sso/internal/lib/jwt"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockHasher) CheckPassword(password string, hash []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", password, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockHasherMockRecorder) CheckPassword(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockHasher)(nil).CheckPassword), password, hash)
}

// Hash mocks base method.
func (m *MockHasher) Hash(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockHasherMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHasher)(nil).Hash), password)
}

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// NewJWT mocks base method.
func (m *MockTokenManager) NewJWT(user *models.User, signKey string, ttl time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJWT", user, signKey, ttl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewJWT indicates an expected call of NewJWT.
func (mr *MockTokenManagerMockRecorder) NewJWT(user, signKey, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJWT", reflect.TypeOf((*MockTokenManager)(nil).NewJWT), user, signKey, ttl)
}

// NewRefreshToken mocks base method.
func (m *MockTokenManager) NewRefreshToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRefreshToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRefreshToken indicates an expected call of NewRefreshToken.
func (mr *MockTokenManagerMockRecorder) NewRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRefreshToken", reflect.TypeOf((*MockTokenManager)(nil).NewRefreshToken))
}

// ParseJWT mocks base method.
func (m *MockTokenManager) ParseJWT(token, signKey string) (*jwt.ParsedJWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", token, signKey)
	ret0, _ := ret[0].(*jwt.ParsedJWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockTokenManagerMockRecorder) ParseJWT(token, signKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockTokenManager)(nil).ParseJWT), token, signKey)
}
